<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" xmlns:components="au.com.clinman.mobile.components.*" xmlns:flextras="com.flextras.mobile.autoCompleteComboBox.*">
	<s:titleContent>
		<s:Label width="100%" textAlign="center" styleName="titlestyle" text="Settings"/>
	</s:titleContent>
	<fx:Declarations>
		<s:GlowFilter 
			id="thefilter"
			color="0x0000FF" 
			alpha=".8" 
			blurX="6" 
			blurY="6" 
			strength=".99" 
			inner="false" 
			knockout="false"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import air.net.URLMonitor;
			
			import au.com.clinman.mobile.lib.FileIO;
			import au.com.clinman.mobile.lib.Web_Service_Interface;
			
			import com.pialabs.eskimo.controls.SkinnableAlert;
			
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			//	import spark.skins.mobile.StageTextInputSkin;
			
			private var _checkURL:URLRequest; 
			private var _checkmonitor:URLMonitor;
			
			[Bindable]
			private var _io:FileIO;
			
			private var _i:int = 0;
			
			private var _systemname:String = "UNE eOSCE";
			
			private var _webservice:Web_Service_Interface;
			
			//[Bindable]
			//private var _previousServicepathsArrayCollection:ArrayCollection = new ArrayCollection();
			
			//[Bindable]
			//private var _previousServicepathsArray:Array;
			
			override public function set data(value:Object):void{
				
				_webservice = value.webservice;
				_io = _webservice.io;
				callLater(function():void{
					//test.textInput.autoCapitalize = 'false';
					//test.textInput.autoCorrect = false;
					/* 		_previousServicepathsArrayCollection.removeAll();
					_previousServicepathsArray = _io.readSetting('previousfunctionpaths').split(',');
					
					for (_i = 0; _i<_previousServicepathsArray.length-1; _i++){
					_previousServicepathsArrayCollection.addItem({'path':_previousServicepathsArray[_i].split('|')[0],'systemname':_previousServicepathsArray[_i].split('|')[1]});
					} */
					
					//	monitorURLIn.text = _io.readSetting('monitorURL');
					var basepathArr:Array = _io.readSetting('functionpath').split('/');
					for (_i = 0; _i<basepathArr.length-1; _i++){
						//if(basepathArr[_i].length>0){
						serviceURLPathIn.text += basepathArr[_i]+'/';
						//test.textInput.text += basepathArr[_i]+'/';
						
						//}
					}
					
				});
			}
			
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				SkinnableAlert.show("This will commit the changes to the settings", "Really?", SkinnableAlert.YES|SkinnableAlert.NO, this, handleCloseEvent)
				
				
			}
			
			private function handleCloseEvent(e:CloseEvent):void{
				if(e.detail==SkinnableAlert.YES){
					
					_io.writeSetting('functionpath', serviceURLPathIn.text+'service.php');
					_io.writeSetting('systemname', _systemname);
					_io.writeSetting('firstrun', 'false');
					
					// save the functionpath setting in a list for later use
					// get existing settings
					/* 		if(_previousServicepathsArray.indexOf(serviceURLPathIn.text+'service.php|'+_systemname) ==-1){
					_previousServicepathsArray.push(serviceURLPathIn.text+'service.php|'+_systemname);
					_io.writeSetting('previousfunctionpaths', _previousServicepathsArray.join(','));
					} */
					
					
					dispatchEvent(new Event('GO_LOGON', true));
				}
			}
			
			// the HTTPservice we'll use to do all our operations
			private var _interfaceService:HTTPService = new HTTPService();
			
			private function checkPath():void{
				dispatchEvent(new Event('WAIT_ON', true));
				
				_interfaceService.requestTimeout = 15;
				_interfaceService.request = new Object();
				_interfaceService.url = serviceURLPathIn.text+'service.php';
				_interfaceService.request.action = 'checksunbeam';
				_interfaceService.request.app = 'true';
				_interfaceService.resultFormat = 'text';
				_interfaceService.method = 'POST';
				_interfaceService.addEventListener( ResultEvent.RESULT, handleCheckMonitorStatusEvent );
				_interfaceService.addEventListener( FaultEvent.FAULT, handleFault );
				// execute the service
				_interfaceService.send();
			}
			
			private function handleCheckMonitorStatusEvent(e:ResultEvent):void{
				dispatchEvent(new Event('WAIT_OFF', true));
				_interfaceService.removeEventListener( ResultEvent.RESULT, handleCheckMonitorStatusEvent );
				_interfaceService.removeEventListener( FaultEvent.FAULT, handleFault );
				var resultXML:XML = new XML('<data/>');
				try{
					
					resultXML= XML(e.result.toString());
					trace(e.result.toString());
					if(resultXML.sysname.toString().length>0){
						feedbackImg.source = 'icons/emblem-default-48.png';
						feedbackLbl .text = "Connected to "+resultXML.sysname
						_systemname = resultXML.sysname;
						saveBut.enabled = true;
						_webservice.monitor.available = true;
					}else{
						feedbackLbl .text = 'Bad URL. Please try again!';
						feedbackImg.source = 'icons/gtk-stop.png';
					}
					;
				}catch(e:Error){
					feedbackLbl .text = 'Bad URL. Please try again!';
					feedbackImg.source = 'icons/gtk-stop.png';
				}
				
			}
			
			private function handleFault(e:FaultEvent):void{
				dispatchEvent(new Event('WAIT_OFF', true));
				_interfaceService.removeEventListener( ResultEvent.RESULT, handleCheckMonitorStatusEvent );
				_interfaceService.removeEventListener( FaultEvent.FAULT, handleFault );
				feedbackLbl .text = 'Network error. Please try again!';
				feedbackImg.source = 'icons/gtk-stop.png';
			}
			
			private function startDemo():void{
				dispatchEvent(new Event('GO_DEMO', true));
			}
			
			
			/* 	protected function test_valueCommitHandler(event:FlexEvent):void
			{
			trace((event.currentTarget as AutoCompleteComboBoxMobile).textInput.text);	
			}
			*/
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%" horizontalAlign="center">
		<s:Spacer height="10%"/>
		<s:HGroup width="95%" verticalAlign="middle">
		</s:HGroup>
		<s:Label width="95%" text="Enter the service URL for the UNE eOSCE product installation for this app." fontWeight="normal" />
		<s:Group width="95%">
			<s:Rect width="100%" height="110%" radiusX="8" radiusY="8">
				<s:fill>
					<s:SolidColor color="#FFFF99"/>
				</s:fill>
			</s:Rect>
			<s:TextInput id="serviceURLPathIn" width="100%" prompt="Enter text..." autoCorrect="false" autoCapitalize="none"  skinClass="spark.skins.ios7.StageTextInputSkin" contentBackgroundColor="#FFFF99" />
		</s:Group>
		<!--<flextras:AutoCompleteComboBoxMobile id="test" width="95%" prompt="Enter text..." labelField="path" dataProvider="{_previousServicepathsArrayCollection}" valueCommit="test_valueCommitHandler(event)" contentBackgroundColor="#FFFF99" />-->
		<s:HGroup verticalAlign="middle" width="95%">
			<s:Button label="Check" click="checkPath()" width="100%"
					  icon="@Embed('icons/settings3-48.png')"/>			
		</s:HGroup>
		<s:HGroup verticalAlign="middle" width="95%">
			<s:Image id="feedbackImg"/><s:Label id="feedbackLbl" text=""/>
		</s:HGroup>
		<s:Spacer height="10%"/>
		<s:Label width="95%" text="OR load a demonstration for training" fontWeight="normal" />
		<s:HGroup verticalAlign="middle" width="95%">
			<s:Button label="Demo Mode" click="startDemo()" width="100%"
					  icon="@Embed('icons/search-48.png')"/>			
		</s:HGroup>
		<s:Label width="95%" text="In Demo Mode you can conduct a sample examination, to familiarise yourself with the process..." fontWeight="normal" />
		
		<s:Spacer height="100%"/>
		<s:Button label="Save" id="saveBut" click="button1_clickHandler(event)" enabled="false"
				  icon="@Embed('icons/save-48.png')" width="95%"/>
		<s:HGroup width="100%" verticalAlign="middle">
		</s:HGroup>
		
		
		
		
	</s:VGroup>
	<s:navigationContent>
		<s:Button id="backButton" label="Back" styleName="navigation" click="dispatchEvent(new Event('GO_LOGON', true));"/>
	</s:navigationContent>
</s:View>

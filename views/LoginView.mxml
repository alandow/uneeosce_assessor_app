<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark">
	<s:titleContent>
		<s:Label width="100%" textAlign="center" styleName="titlestyle" text="Login to {_sysname}"/>
	</s:titleContent>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import au.com.clinman.events.LogonCompleteEvent;
			import au.com.clinman.mobile.lib.FileIO;
			import au.com.clinman.mobile.lib.Web_Service_Interface;
			
			import flashx.textLayout.tlf_internal;
			
			import mx.rpc.events.FaultEvent;
			
			private var _webservice:Web_Service_Interface;
			
			[Bindable]
			private var _sysname:String = "";
			
			import mx.events.FlexEvent;
			
			override public function set data(value:Object):void{
				
				super.data = value;
				this._webservice = value.webservice;
				_sysname = this._webservice.io.readSetting('systemname');
				
			}
			
			protected function logonBut_clickHandler(event:MouseEvent):void
			{
				_webservice.addEventListener(LogonCompleteEvent.COMPLETE, handleLogonResult);
				_webservice.addEventListener(FaultEvent.FAULT, handleFault);
				dispatchEvent(new Event('WAIT_ON', true));
				_webservice.logon(username.text, password.text);
				
			}
			
			private function handleLogonResult(e:LogonCompleteEvent):void{
				dispatchEvent(new Event('WAIT_OFF', true));
				trace(e.results);
				if(e.results.error.length()>0){
					feedback.text = e.results.detail;
				}else{
					_webservice.io.writeSetting('token', e.results.token);
					_webservice.io.writeSetting('currentuserID', e.results.userID);
					_webservice.io.writeSetting('currentusername', e.results.name);
					_webservice.loggedIn = true;
					dispatchEvent(new Event('GO_HOME', true));
				}
			}
			
			private function handleFault(e:FaultEvent):void{
				dispatchEvent(new Event('WAIT_OFF', true));
				_webservice.removeEventListener(LogonCompleteEvent.COMPLETE, handleLogonResult);
				_webservice.removeEventListener(FaultEvent.FAULT, handleFault);
				feedback.text = 'Network error';
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event('GO_SETUP', true));
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%" horizontalAlign="center">
		<s:Spacer height="10"/>
		<s:Label text="Username" color="#7D5177" fontSize="26" styleName="bold"/>
		<s:Group>
			<s:Rect width="100%" height="100%" radiusX="8" radiusY="8">
				<!--<s:stroke>
					<s:SolidColorStroke color="#000000" weight="1"/>
				</s:stroke>-->
				<s:fill>
					<s:SolidColor color="#FFFF99"/>
				</s:fill>
			</s:Rect>
		<s:TextInput id="username" text="examiner" autoCorrect="false" autoCapitalize="none" skinClass="spark.skins.ios7.StageTextInputSkin" contentBackgroundColor="#FFFF99"/>
			</s:Group>
		<s:Label text="Password" color="#7D5177" fontSize="26" styleName="bold"/>
		<s:Group>
			<s:Rect width="100%" height="100%" radiusX="8" radiusY="8">
				<s:fill>
					<s:SolidColor color="#FFFF99"/>
				</s:fill>
			</s:Rect>
			<s:TextInput id="password" text="password"  displayAsPassword="true" skinClass="spark.skins.ios7.StageTextInputSkin" contentBackgroundColor="#FFFF99"/>
		</s:Group>
		<s:Button id="logonBut" width="95%" label="Login"  icon="@Embed('icons/System-Login-icon-48.png')" click="logonBut_clickHandler(event)"/>
		<s:Label id="feedback" color="#FF0000"/>
		<s:Spacer height="100%"/>
		<s:Button width="95%" label="Settings" icon="@Embed('icons/settings3-48.png')" click="button1_clickHandler(event)"/>
		<s:Spacer height="10%"/>
	</s:VGroup>
	<s:Label right="2" bottom="2" text="Version 1.5.1"/>
</s:View>
